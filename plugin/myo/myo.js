// Generated by CoffeeScript 1.6.2
/*Copyright (c) 2013 Serkan Yersen

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/


(function() {
  "use strict";
  var addEvent, customEvent, doc, fireEvent, hidden, idleStartedTime, idleTime, ie, ifvisible, init, initialized, status, trackIdleStatus, visibilityChange;

  ifvisible = {};

  doc = document;

  initialized = false;

  status = "active";

  idleTime = 60000;

  idleStartedTime = false;

  customEvent = (function() {
    var S4, addCustomEvent, cgid, fireCustomEvent, guid, listeners;

    S4 = function() {
      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    };
    guid = function() {
      return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
    };
    listeners = {};
    cgid = '__ceGUID';
    addCustomEvent = function(obj, event, callback) {
      obj[cgid] = undefined;
      if (!obj[cgid]) {
        obj[cgid] = "ifvisible.object.event.identifier";
      }
      if (!listeners[obj[cgid]]) {
        listeners[obj[cgid]] = {};
      }
      if (!listeners[obj[cgid]][event]) {
        listeners[obj[cgid]][event] = [];
      }
      return listeners[obj[cgid]][event].push(callback);
    };
    fireCustomEvent = function(obj, event, memo) {
      var ev, _i, _len, _ref, _results;

      if (obj[cgid] && listeners[obj[cgid]] && listeners[obj[cgid]][event]) {
        _ref = listeners[obj[cgid]][event];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ev = _ref[_i];
          _results.push(ev(memo || {}));
        }
        return _results;
      }
    };
    return {
      add: addCustomEvent,
      fire: fireCustomEvent
    };
  })();

  addEvent = (function() {
    var setListener;

    setListener = false;
    return function(el, ev, fn) {
      if (!setListener) {
        if (el.addEventListener) {
          setListener = function(el, ev, fn) {
            return el.addEventListener(ev, fn, false);
          };
        } else if (el.attachEvent) {
          setListener = function(el, ev, fn) {
            return el.attachEvent('on' + ev, fn, false);
          };
        } else {
          setListener = function(el, ev, fn) {
            return el['on' + ev] = fn;
          };
        }
      }
      return setListener(el, ev, fn);
    };
  })();

  fireEvent = function(element, event) {
    var evt;

    if (doc.createEventObject) {
      return element.fireEvent('on' + event, evt);
    } else {
      evt = doc.createEvent('HTMLEvents');
      evt.initEvent(event, true, true);
      return !element.dispatchEvent(evt);
    }
  };

  ie = (function() {
    var all, check, div, undef, v;

    undef = void 0;
    v = 3;
    div = doc.createElement("div");
    all = div.getElementsByTagName("i");
    check = function() {
      return (div.innerHTML = "<!--[if gt IE " + (++v) + "]><i></i><![endif]-->", all[0]);
    };
    while (check()) {
      continue;
    }
    if (v > 4) {
      return v;
    } else {
      return undef;
    }
  })();

  hidden = false;

  visibilityChange = void 0;

  if (typeof doc.hidden !== "undefined") {
    hidden = "hidden";
    visibilityChange = "visibilitychange";
  } else if (typeof doc.mozHidden !== "undefined") {
    hidden = "mozHidden";
    visibilityChange = "mozvisibilitychange";
  } else if (typeof doc.msHidden !== "undefined") {
    hidden = "msHidden";
    visibilityChange = "msvisibilitychange";
  } else if (typeof doc.webkitHidden !== "undefined") {
    hidden = "webkitHidden";
    visibilityChange = "webkitvisibilitychange";
  }

  trackIdleStatus = function() {
    var timer, wakeUp;

    timer = false;
    wakeUp = function() {
      clearTimeout(timer);
      if (status !== "active") {
        ifvisible.wakeup();
      }
      idleStartedTime = +(new Date());
      return timer = setTimeout(function() {
        if (status === "active") {
          return ifvisible.idle();
        }
      }, idleTime);
    };
    wakeUp();
    addEvent(doc, "mousemove", wakeUp);
    addEvent(doc, "keyup", wakeUp);
    addEvent(window, "scroll", wakeUp);
    return ifvisible.focus(wakeUp);
  };

  init = function() {
    var blur;

    if (initialized) {
      return true;
    }
    if (hidden === false) {
      blur = "blur";
      if (ie < 9) {
        blur = "focusout";
      }
      addEvent(window, blur, function() {
        return ifvisible.blur();
      });
      addEvent(window, "focus", function() {
        return ifvisible.focus();
      });
    } else {
      addEvent(doc, visibilityChange, function() {
        if (doc[hidden]) {
          return ifvisible.blur();
        } else {
          return ifvisible.focus();
        }
      }, false);
    }
    initialized = true;
    return trackIdleStatus();
  };

  ifvisible = {
    setIdleDuration: function(seconds) {
      return idleTime = seconds * 1000;
    },
    getIdleDuration: function() {
      return idleTime;
    },
    getIdleInfo: function() {
      var now, res;

      now = +(new Date());
      res = {};
      if (status === "idle") {
        res.isIdle = true;
        res.idleFor = now - idleStartedTime;
        res.timeLeft = 0;
        res.timeLeftPer = 100;
      } else {
        res.isIdle = false;
        res.idleFor = now - idleStartedTime;
        res.timeLeft = (idleStartedTime + idleTime) - now;
        res.timeLeftPer = (100 - (res.timeLeft * 100 / idleTime)).toFixed(2);
      }
      return res;
    },
    focus: function(callback) {
      if (typeof callback === "function") {
        return this.on("focus", callback);
      }
      status = "active";
      customEvent.fire(this, "focus");
      customEvent.fire(this, "wakeup");
      return customEvent.fire(this, "statusChanged", {
        status: status
      });
    },
    blur: function(callback) {
      if (typeof callback === "function") {
        return this.on("blur", callback);
      }
      status = "hidden";
      customEvent.fire(this, "blur");
      customEvent.fire(this, "idle");
      return customEvent.fire(this, "statusChanged", {
        status: status
      });
    },
    idle: function(callback) {
      if (typeof callback === "function") {
        return this.on("idle", callback);
      }
      status = "idle";
      customEvent.fire(this, "idle");
      return customEvent.fire(this, "statusChanged", {
        status: status
      });
    },
    wakeup: function(callback) {
      if (typeof callback === "function") {
        return this.on("wakeup", callback);
      }
      status = "active";
      customEvent.fire(this, "wakeup");
      return customEvent.fire(this, "statusChanged", {
        status: status
      });
    },
    on: function(name, callback) {
      init();
      return customEvent.add(this, name, callback);
    },
    onEvery: function(seconds, callback) {
      var t;

      init();
      t = setInterval(function() {
        if (status === "active") {
          return callback();
        }
      }, seconds * 1000);
      return {
        stop: function() {
          return clearInterval(t);
        },
        code: t,
        callback: callback
      };
    },
    now: function() {
      init();
      return status === "active";
    }
  };

  if (typeof define === "function" && define.amd) {
    define(function() {
      return ifvisible;
    });
  } else {
    window.ifvisible = ifvisible;
  }

}).call(this);

// Myo library
(function(){

   var Socket;
   if(typeof window === 'undefined'){
      Socket = require('ws');
   }else {
      if (!("WebSocket" in window)){
         console.error('Myo.js : Sockets not supported :(');
      }
      Socket = WebSocket;
   }
   /**
    * Utils
    */
   var extend = function(){
      var result = {};
      for(var i in arguments){
         var obj = arguments[i];
         for(var propName in obj){
            if(obj.hasOwnProperty(propName)){ result[propName] = obj[propName]; }
         }
      }
      return result;
   };
   var unique_counter = 0;
   var getUniqueId = function(){
      unique_counter++;
      return new Date().getTime() + "" + unique_counter;
   }


   var eventTable = {
      'pose' : function(myo, data){
         if(myo.lastPose != 'rest' && data.pose == 'rest'){
            myo.trigger(myo.lastPose, false);
            myo.trigger('pose', myo.lastPose, false);
         }
         myo.trigger(data.pose, true);
         myo.trigger('pose', data.pose, true);
         myo.lastPose = data.pose;
      },
      'rssi' : function(myo, data){
         myo.trigger('bluetooth_strength', data.rssi);
      },
      'orientation' : function(myo, data){
         myo._lastQuant = data.orientation;
         //console.log(data.orientation, myo.orientationOffset);
         var imu_data = {
            orientation : {
               x : data.orientation.x - myo.orientationOffset.x,
               y : data.orientation.y - myo.orientationOffset.y,
               z : data.orientation.z - myo.orientationOffset.z,
               w : data.orientation.w - myo.orientationOffset.w
            },
            accelerometer : {
               x : data.accelerometer[0],
               y : data.accelerometer[1],
               z : data.accelerometer[2]
            },
            gyroscope : {
               x : data.gyroscope[0],
               y : data.gyroscope[1],
               z : data.gyroscope[2]
            }
         }
         if(!myo.lastIMU) myo.lastIMU = imu_data;
         myo.trigger('orientation',   imu_data.orientation);
         myo.trigger('accelerometer', imu_data.accelerometer);
         myo.trigger('gyroscope',     imu_data.gyroscope);
         myo.trigger('imu',           imu_data);
         myo.lastIMU = imu_data;
      },
      'arm_recognized' : function(myo, data){
         myo.arm = data.arm;
         myo.direction = data.x_direction;
         myo.trigger(data.type);
      },
      'arm_lost' : function(myo, data){
         myo.arm = undefined;
         myo.direction = undefined;
         myo.trigger(data.type);
      },
      'connected' : function(myo, data){
         myo.connect_version = data.version.join('.');
         myo.isConnected = true;
         myo.trigger(data.type)
      },
      'disconnected' : function(myo, data){
         myo.isConnected = false;
         myo.trigger(data.type);
      }
   };

   var handleMessage = function(msg){
      var data = JSON.parse(msg.data)[1];
      if(Myo.myos[data.myo] && eventTable[data.type]){
         eventTable[data.type](Myo.myos[data.myo], data);
      }
   };


   /**
    * Eventy-ness
    */
   var trigger = function(events, eventName, args){
      var self = this;
      //
      events.map(function(event){
         if(event.name == eventName) event.fn.apply(self, args);
         if(event.name == '*'){
            args.unshift(eventName)
            event.fn.apply(self, args);
         }
      });
      return this;
   };
   var on = function(events, name, fn){
      var id = getUniqueId()
      events.push({
         id   : id,
         name : name,
         fn   : fn
      });
      return id;
   };
   var off = function(events, name){
      events = events.reduce(function(result, event){
         if(event.name == name || event.id == name) {
            return result;
         }
         result.push(event);
         return result;
      }, []);
      return events;
   };



   var myoInstance = {
      isLocked : false,
      isConnected : false,
      orientationOffset : {x : 0,y : 0,z : 0,w : 0},
      lastIMU : undefined,
      socket : undefined,
      arm : undefined,
      direction : undefined,
      events : [],

      trigger : function(eventName){
         var args = Array.prototype.slice.apply(arguments).slice(1);
         trigger.call(this, Myo.events, eventName, args);
         trigger.call(this, this.events, eventName, args);
         return this;
      },
      on : function(eventName, fn){
         return on(this.events, eventName, fn)
      },
      off : function(eventName){
         this.events = off(this.events, eventName);
      },

      timer : function(status, timeout, fn){
         if(status){
            this.timeout = setTimeout(fn.bind(this), timeout);
         }else{
            clearTimeout(this.timeout)
         }
      },
      lock : function(){
         if(this.isLocked) return true;
         this.isLocked = true;
         this.trigger('lock');
         return this;
      },
      unlock : function(timeout){
         var self = this;
         clearTimeout(this.lockTimeout);
         if(timeout){
            this.lockTimeout = setTimeout(function(){
               self.lock();
            }, timeout);
         }
         if(!this.isLocked) return this;
         this.isLocked = false;
         this.trigger('unlock');
         return this;
      },
      zeroOrientation : function(){
         this.orientationOffset = this._lastQuant;
         this.trigger('zero_orientation');
         return this;
      },

      vibrate : function(intensity){
         intensity = intensity || 'medium';
         Myo.socket.send(JSON.stringify(['command',{
            "command": "vibrate",
            "myo": this.id,
            "type": intensity
         }]));
         return this;
      },
      requestBluetoothStrength : function(){
         Myo.socket.send(JSON.stringify(['command',{
            "command": "request_rssi",
            "myo": this.id
         }]));
         return this;
      },
   }


   Myo = {
      options : {
         api_version : 1,
         socket_url  : "ws://127.0.0.1:10138/myo/"
      },
      events : [],
      myos : [],

      /**
       * Myo Constructor
       * @param  {number} id
       * @param  {object} options
       * @return {myo}
       */
      create : function(id, options){
         if(!id) id = 0;
         if(typeof id === "object") options = id;
         options = options || {};

         var newMyo = Object.create(myoInstance);
         newMyo.options = extend(Myo.options, options);
         newMyo.events = [];
         newMyo.id = id;
         Myo.myos[id] = newMyo;
         return newMyo;
      },

      /**
       * Event functions
       */
      trigger : function(eventName){
         var args = Array.prototype.slice.apply(arguments).slice(1);
         trigger.call(Myo, Myo.events, eventName, args);
         return Myo;
      },
      on : function(eventName, fn){
         return on(Myo.events, eventName, fn)
      },
      start : function(){
         if(!Myo.socket){
            Myo.socket = new Socket(Myo.options.socket_url + Myo.options.api_version);
         }
         Myo.socket.onmessage = handleMessage;
      }

   };

   Myo.start();
   if(typeof module !== 'undefined') module.exports = Myo;
})();

/*
 * Myo integration for Reveal.js.
 * Sean Zellmer [lejeunerenard]
 */

(function() {
   var body = document.body,
   myoConfig  = Reveal.getConfig().myo,
   config = {
      idleTimeOut: 300,    // The number of seconds before the site goes idle.
      unlockTimeout: 5000, // The number of seconds before the myo locks.
      holdTimeout: 1000    // How long before the hold gestures fires.
   },
   myo, holdGestureTimer;

   // Extend default with user defined settings
   if( myoConfig ) {
      for( key in myoConfig ) {
         config[key] = myoConfig[key];
      }
   }

   /*
    * Allow user to specify which myo to use.
    * If they dont, use the libraries default.
    */

   if ( config.myoId ) {
      myo = Myo.create( config.myoId );
   } else {
      myo = Myo.create();
   }

   /*
    * Hold Previous / Next
    */

   function holdNext() {
      holdGestureTimer = window.setInterval(function() {
         Reveal.next();
         myo.unlock(config.unlockTimeout);
      }, 100);
   }
   function holdPrev() {
      holdGestureTimer = window.setInterval(function() {
         Reveal.prev();
         myo.unlock(config.unlockTimeout);
      }, 100);
   }

   myo.on('thumb_to_pinky', function(edge){
      if ( ifvisible.now() ) {
         myo.unlock(config.unlockTimeout);
      }
   });
   myo.on('unlock', function(){
      myo.vibrate();
   });
   myo.on('lock', function(){
      myo.vibrate('short');
   });
   //myo.on('fingers_spread', function(edge) {
   //   if(edge && !myo.isLocked){
   //      Reveal.toggleOverview();
   //   }
   //});
   myo.on('wave_out', function(edge){
      // Fire next and make sure the myo stays unlocked
      // on the start of the pose
      if(edge && !myo.isLocked){
         myo.unlock(config.unlockTimeout);
         if (myo.arm == 'left') {
            Reveal.prev();
         } else {
            Reveal.next();
         }
      }

      // Turn off hold timer when pose stops
      if (!edge) { window.clearInterval(holdGestureTimer); }

      /*
       * Initialize timer when pose starts
       * or turn off if it ends.
       * Otherwise trigger the hold event.
       */

      myo.timer(edge, config.holdTimeout, function(){
         if(!myo.isLocked){
            myo.trigger('wave_out_hold');
         }
      });
   });
   myo.on('wave_in', function(edge){
      // Fire prev and make sure the myo stays unlocked
      // on the start of the pose
      if(edge && !myo.isLocked){
         myo.unlock(config.unlockTimeout);
         if (myo.arm == 'left') {
            Reveal.next();
         } else {
            Reveal.prev();
         }
      }

      // Turn off hold timer when pose stops
      if (!edge) { window.clearInterval(holdGestureTimer); }

      /*
       * Initialize timer when pose starts
       * or turn off if it ends.
       * Otherwise trigger the hold event.
       */

      myo.timer(edge, config.holdTimeout, function(){
         if(!myo.isLocked){
            myo.trigger('wave_in_hold');
         }
      });
   });
   myo.on('wave_out_hold', function() {
      if (myo.arm == 'left') {
         holdPrev();
      } else {
         holdNext();
      }
   });
   myo.on('wave_in_hold', function() {
      if (myo.arm == 'left') {
         holdNext();
      } else {
         holdPrev();
      }
   });

   /*
    * ifvisible.js Settings and Events
    */

   ifvisible.setIdleDuration(config.idleTimeOut);
   ifvisible.on('blur', function(){
      myo.lock();
   });

}());
